@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode InteractiveServer
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager


<div class="row g-0">
    <div class="col-md-12">
        <button class="btn btn-primary float-end" @onclick="ShouldAddPokemon">
            Add Pokemon
        </button>
    </div>
</div>

@if (showForm)
{
    <div class="card">
        <div class="card-body bg-light">
            <h4 class="card-title">
                @(model.Id == 0 ? "Add Pokemon" : "Edit Pokemon")
            </h4>
            <EditForm OnValidSubmit="Submit" EditContext="editContext">
                <DataAnnotationsValidator />
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText class="form-control" placeholder="Name" @bind-Value="model.Name" />
                        <ValidationMessage For ="@(() => model.Name)" />
                    </div>
                    <div class="col-md-3">
                        <label for="type" class="form-label">Type</label>
                        <InputText class="form-control" placeholder="Type" @bind-Value="model.Type" />
                        <ValidationMessage For="@(() => model.Type)" />
                    </div>
                    <div class="col-md-3">
                        <label for="total" class="form-label">Total</label>
                        <InputNumber class="form-control" @bind-Value="model.Total" />
                        <ValidationMessage For="@(() => model.Total)" />
                    </div>
                    <div class="col-md-3">
                        <label for="hp" class="form-label">HP</label>
                        <InputNumber class="form-control" @bind-Value="model.HP" />
                        <ValidationMessage For="@(() => model.HP)" />
                    </div>
                    <div class="col-md-3">
                        <label for="attack" class="form-label">Attack</label>
                        <InputNumber class="form-control" @bind-Value="model.Attack" />
                        <ValidationMessage For="@(() => model.Attack)" />
                    </div>
                    <div class="col-md-3">
                        <label for="defence" class="form-label">Defence</label>
                        <InputNumber class="form-control" @bind-Value="model.Defence" />
                        <ValidationMessage For="@(() => model.Defence)" />
                    </div>
                    <div class="col-md-3">
                        <label for="speed" class="form-label">Speed</label>
                        <InputNumber class="form-control" @bind-Value="model.Speed" />
                        <ValidationMessage For="@(() => model.Speed)" />
                    </div>
                    <div class="col-md-3">
                        <label for="generation" class="form-label">Generation</label>
                        <InputNumber class="form-control" @bind-Value="model.Generation" />
                        <ValidationMessage For="@(() => model.Generation)" />
                    </div>
                    <div class="col-md-12">
                        <InputCheckbox class="form-check-input" @bind-Value="model.Legendary" />
                        <label for="legendary" class="form-label">Legendary</label>
                    </div>
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary float-end">@(model.Id == 0 ? "Add Pokemon" : "Edit Pokemon")</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

}

@if (Pokemons == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <QuickGrid Theme="pokemon" Class="table" Items="@FilteredPokemon" Pagination="@pagination">
            <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Name)" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" placeholder="Pokemon name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(p => p.Total)" Sortable="true" />
            <PropertyColumn Property="@(p => p.HP)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Attack)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Defence)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Speed)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Generation)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Legendary)" Sortable="true" />
            <TemplateColumn Title="Edit">
                <button class="btn btn-success" @onclick="() => Edit(context)">Edit</button>
            </TemplateColumn>
            <TemplateColumn Title="Delete">
                <button class="btn btn-danger" @onclick="() => Delete(context)">Delete</button>
            </TemplateColumn>
            <TemplateColumn Title="Info">
                <button class="btn btn-primary" @onclick="() => ShowInfo(context)">Info</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination" />
    </div>
}



@code {
    private List<Pokemon>? pokemons;
    private EditContext editContext;
    private Pokemon model;
    private bool showForm;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private string nameSearch;

    [Parameter]
    public EventCallback<bool> OnSaved { get; set; }

    [Parameter]
    public EventCallback<Pokemon> OnEditClicked { get; set; }

    [Parameter]
    public EventCallback<Pokemon> OnDeleteClicked { get; set; }

    [Parameter]
    public IQueryable<Pokemon>? Pokemons { get; set; }

    [Parameter]
    public Pokemon Model
    {
        get
        {
            return model;
        }
        set
        {
            model = value ?? new Pokemon();
            editContext = new(model);
        }
    }

    private IQueryable<Pokemon>? FilteredPokemon
    {
        get
        {
            IQueryable<Pokemon>? filtered = Pokemons;
            if (!string.IsNullOrEmpty(nameSearch))
            {
                filtered = filtered?.Where(c => c.Name.Contains(nameSearch, StringComparison.CurrentCultureIgnoreCase));
            }
            return filtered;

        }
    }

    private void ShowInfo(Pokemon pokemon)
    {
        NavigationManager.NavigateTo($"/Info/{pokemon.Id}");
    }

    private void ShouldAddPokemon()
    {
        model = new Pokemon();
        editContext = new EditContext(model);
        showForm = true;
    }

    private void Edit(Pokemon pokemon)
    {
        OnEditClicked.InvokeAsync(pokemon);
    }

    private async Task Submit()
    {
        if (model.Id == 0)
            DbContext.Pokemons.Add(model);
        else
            DbContext.Pokemons.Update(model);


        await DbContext.SaveChangesAsync();
        await OnSaved.InvokeAsync();

    }

    protected override async Task OnInitializedAsync()
    {
        await GetPokemon();
    }

    private async Task Delete(Pokemon pokemon)
    {
        DbContext.Pokemons.Remove(pokemon);
        await DbContext.SaveChangesAsync();
        await OnDeleteClicked.InvokeAsync(pokemon);
    }

    private async Task GetPokemon()
    {
        Pokemons = (await DbContext.Pokemons.ToListAsync()).AsQueryable();
    }
}
